{"title":"Scope","message":"Scope refers to what variables or constants are accessible, where. There are two types of scope: Global scope and local scope. **Global scope** is anything declared outside of a function's body. (Vairables declared with var in the global scope become properties of the global object (like window in browsers), while those declared with let or const remain global but aren't attached to the global object.) \n\nLocal scopes are local to a function body, essentially, local scope refers to variables and functions that are declared within a function's body. These variables are only accessible within that function: If you declare a variable inside a function, it remains hidden from the rest of your code unless you explicitly return or expose it.\n\nGenerally, functions enclose a scope and protect their variables from parent scopes, including the global scope. Functions can access the variables in their parent scopes! But parent scope cannot access variables in child scopes: If you declare a variable inside a function, other functions outside that scope, including the global scope, cannot access that variable.\n\nConversely, functions defined inside a parent function (child functions) can access variables from the parent (or outer) scope because of JavaScriptâ€™s lexical scoping. Introducing the concept of closures: The inner function (child function) \"remembers\" or stores its surrounding environment (its lexical/global scope) in which it was created. \n\n\t\t\t\t\t\t\t\t\t\t\t\t\t**Global Scope**\n\nlet a = 1;\nfunction doSomething() {\n\ta = 2;\n}\nconsole.log(a); --> prints 1\ndoSomething();\nconsole.log(a); --> prints 2\n\n(In this example, a is in the global scope, and is visible within the scope of doSomething())\n\nIn the above example, a is accessible within the body or **scope** of doSomething(), and can therefore alter the value a contains. \n\nlet a = 1;\n\nfunction doSomething() {\n\ta = 2;\n\tlet person = \"Mary Jane\";\n\tconsole.log(\"Inside doSomething(), person: \", person);\n}\n\nconsole.log(\"Before calling doSomething(), a: \", a); --> Prints a = 1\ndoSomething();\nconsole.log(\"After calling doSomething(), a: \", a); --> Prints a = 2\n//console.log(\"Outside doSomething(), person: \", person); --> The variable person is created within the scope of the function doSomething(), so it is not accessible in the parent scope. Inside doSomething(), person can be accessed and logged without issue. Outside of doSomething(), person results in a ReferenceError because person is not available in the global (parent) scope.\n\n\t\t\t\t\t\t\t**Function Scope or Local Scope**\n\t\t\t\t\t\t\t\nLocal scope refers to declarations that happen within the body of a function. These declarations are only available within the function itself and any function declared within it. \n\nfunction doSomething() {\n\t\tvar a = 1;\n\t\tconsole.log(a);\n\t}\n\tconsole.log(a); --> This line throws a ReferenceError: a is not defined because within the local scope, the variable a is declared with var inside doSomething(), which is a local scope function, making a local to the function doSomething. It is only accessible within the boundaries of the doSomething function. \n\t\nTrying to console.log(a) outside of doSomething(), JavaScript attempts to look for a in the global scope. Since a was only defined within the local scope function doSomething() and not globally, it throws a ReferenceError.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t**Block Scope**\n\nBlock scope refers to a type of local scope that involves any pair of curly braces. Only variables defined with let or const are block-scoped. Variables defined with var ignore curly braces unless those curly braces belong to a function.\n\nif (true) {\n\t\tvar a = 1;\n\t\tlet b = 2;\n\t\tconsole.log(a);\n\t\tconsole.log(b)\n}\nconsole.log(a); --> Prints 1; a is not block-scoped. Variables declared with var are hoisted to the top of the function in which they're declared. If they're declared outside any function, they're global. Since the if block is not a function, var a is declared in the global scope and, therefore, can be accessed and printed outside the block.\n\nconsole.log(b); --> This line throws ReferenceError: b is not defined because variables declared with let (or const) are block-scoped, meaning they are exist only within the nearest set of curly braces {}, such as within the if block. If b is accessed outside of the if block, JavaScript would throw a ReferenceError because it is not accessible outside of its block scope.\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t **Nested Scope**\n\nFunction can be defined within other Functions, forming nested scopes. In the following example, a is declared within doSomething(), but is accessible within the child scope of doSomethingAgain():\n\nfunction doSomething() {\n\tlet a = 1;\n\tfunction doSomethingAgain() {\n\ta = 2;\n}\ndoSomethingAgain();\nconsole.log(a); --> prints 2\n}\ndoSomething();\n\nBut parent scopes do not have access to declarations within children scopes:\n\nfunction doSomething() {\n\tfunction doSomethingAgain() {\n\t\tvar a = 1; --> 'a' is declared inside doSomethingAgain, so it is local to the doSomethingAgain function\n\t}\n\tdoSomethingAgain();\n\tconsole.log(a); --> This line throws a ReferenceError: a is not defined because 'a' is not defined in the doSomething scope (or any parent scope). When the parent function doSomething() attempts to console.log(a), it doesn't find a definition for a in its scope chain, resulting in a ReferenceError.\n\t}\ndoSomething();","id":"1c95d35f-07bc-4502-944b-d79070f65f11","date":"2025-04-12T00:13:54.415Z","updated":"2025-04-12T00:17:50.420Z"}