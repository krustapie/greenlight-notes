{"title":"Review - Arrays","message":"Arrays are considered to be collections in JavaScript. Collections allow us to group multiple values of different data types together to be passed as one. Specifically, an array is a 0-indexed list. This means that each item, or element, in an aray has a number that corresponds to its position inside the array, beginning with the number 0. Once again, each item listed in an array is an element and its index is the order of the element inside the array. Arrays are considered like the following simple table: \n\n[\"John\", \"Max\", \"Ray\", \"Cindy\", \"Ivy\"] --> This array can be written out like so: \n\n0: \"John\"\n1: \"Max\"\n2: \"Ray\"\n3: \"Cindy\"\n4: \"Ivy\"\n\n                            ** Literal Arrays**\nExamples of literal arrays are:\n[] --> Empty literal Array\n[1] --> Literal Array with one element\n[1, 2, 3] --> Literal Array with three elements\n\nvar theKitchenSink = [1, true, 'hey',[5, \"Mary\"], false];\n\nvar myArray = [1, 2, 3];\nconsole.log(\"My lucky number is \" + myArray[2]) --> Prints \"my lucky number is 3\". myArray[2] accesses the element at index 2, which is the third element in the array, with a value of 3. JavaScript converts the number 3 to a string and concatenates it with the string literal, \"My lucky number is \", resulting in \"My lucky number is 3\". The console.log function then prints the resulting string.\n\nvar names = [\"John\", \"Max\", \"Ray\", \"Cindy\", \"Angela\"]\nconsole.log(\"my name is \" + names[0]);\n--> prints \"my name is John\". names is an array containing 5 strings; names[0] accesses the element at index 0, which is the first element in the array, with a value of \"John\". The expression \"my name is \" + names[0] concatenates the string literal \"my name is \" with the string value stored in names[0]. Since names[0] is already a string(\"John\"), JavaScript directly combines them into \"my name is John\". The console.log function then prints the resulting string, which is \"my name is John\".\n\nSince the first element in an array will always have the index 0, to access the first element of any given array, we would use the following syntax:\n\nnames[0]\n\nThe .length property can be used to return the number of elements in an array. however, remember that arrays begin indexing at 0 whereas .length begins its count at 1. Therefore, to access the last element of a given array, you would use the following syntax:\n\nnames[names.length -1]; (Assuming an array called \"names\" exists).\n\n                            **Adding to Arrays**\nThere are multiple methods to add new elements to arrays. Two of the most common are to either use bracket notation or to use the .push() method. The bracket notation method is as follows:\n\nnames[names.length] = \"Larry\"; --> This would add a new element, \"Larry\", at the index of names.length. Because names.length is one more than the current last index of the array, it adds the new element onto the end of the array.\n\nThe .push() method is as follows:\n\nnames.push(\"Larry\"); --> This would also add \"Larry\" to the end of the array. Because it is quicker to write, it is generally the preferred method of adding new elements to the end of an array.","id":"4dca95d5-f634-4936-8d71-f70c0f561141","date":"2025-04-10T19:05:40.278Z"}