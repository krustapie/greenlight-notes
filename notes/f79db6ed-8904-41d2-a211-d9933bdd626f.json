{"title":"Objects","message":"Objects are used to store multiple pieces of related data in a single variable. They encapsulate (enclose in a capsule; summarize) data in the form of key-value pairs. Arrays, previously used for storing similar (simple) data; however, this presents a potential problem: You need to remember that name is stored at index[0], that the year is stored at index[1], and the list of powers are at index[2] in the example of the code below:\n\nvar myHero = [\n\t\t\t\"Halle bot\",\n\t\t\t2014, \n\t\t\t[\"Jumping\", \"Blast\", \"Ducking\"]\n};\n\nWe can pull out this data using bracket notation: \n\nmyHero[0] --> \"Hallebot\"\nmyHero[1] --> 2014\nmyHero[2] --> [\"Jumping\", \"Blast\", \"Ducking\"]\n\nOne solution to this would be to create variables. We have names that could help us remember the indexes for each value:\n\nvar nameIndex = 0, yearCreatedIndex = 1, powersIndex = 2;\n\nmyHero[nameIndex] --> \"Hallebot\"\nmyHero[yearCreatedIndex] --> 2014\nmyHero[powersIndex] --> [\"Jumping\", \"Blast\", \"Ducking\"]\n\nHowever, we are now back at the issue where we have to input a variable for the output to be the value. Objects are used to overcome this problem.\n\nObjects are a complex data type that collect data in the form of { \"key\": value} pairs, which are called properties. In the example below, the values \"Hallebot\", \"2014, and the array of powers, [\"Jumping\", \"Blast\", \"Ducking\"], are each paired up with a string key. \n\nObjects make accessing these values very easy through Dot Notation: myObject.key. To access Hallebot's name, simply write: myHero.name:\n\nmyHero.name --> \"Hallebot\"\nmyHero.yearCreated --> 2014\nmyHero.powers --> ]\"Jumping\", \"Blast\", \"Ducking\"].\n\nThe Object data type is great for modeling people (users), entities, and objects. In the object data type, each key in the {\"key\": value} pair is written as a string; keys are basically variables of their own within our object, so their names should be descriptive of the value that they hold, and will be typically written in camelcase. The value is then seperated from the key with a colon, and each property is ended with a comma to separate it from the next.\n\nThe values of our objects can be accessed through Dot Notation. Yet, objects (like arrays) can also use Bracket Notation. Both can be used to access or chnge the values of an Object:\n\nvar myHero = {\n\t\t\t\"name\": \"Hallebot\",\n\t\t\t\"yearCreated\": 2014,\n\t\t\t\"powers\": [\"Jumping\",  \"Blast\", \"Ducking\"]\n};\n\nconsole.log(myHero.name = \" was created in \" + myHero[\"yearCreated\"]); --> Dot notation was used to access myHero.name and Bracket notation was used to access myHero[\"yearCreated\"].\n\nmyHero[\"weakness\"] = \"Rust\"; --> A new key value pair entry is created in the myHero object using Bracket notation and the assignment operator. When printed in the console, the myHero object now has the weakness \"rust\" key value pair. \n\nmyHero.powers.push(\"Coding\"); --> Dot notation is used to access the myHero.powers array, then using the .push method, coding is added to the end of the array of powers.\n\nDot Notation --> myObject.myKey\nBracket Notation --> myObject[\"myKey\"]\n\n","id":"f79db6ed-8904-41d2-a211-d9933bdd626f","date":"2025-04-17T23:50:08.168Z"}